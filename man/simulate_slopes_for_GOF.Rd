% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/goodness_of_fit.R
\name{simulate_slopes_for_GOF}
\alias{simulate_slopes_for_GOF}
\title{Simulate slopes for the goodness of fit test}
\usage{
simulate_slopes_for_GOF(
  N_replicates_level1 = 200L,
  N_replicates_level2 = 49L,
  birth_level_data,
  scenario,
  life_history_fits = NULL,
  nb_cores = 2L,
  lapply_pkg = "pbmcapply",
  seed = 1L,
  timeout = Inf,
  verbose = list(fit = FALSE, simu = FALSE),
  .log = FALSE
)
}
\arguments{
\item{N_replicates_level1}{the number of simulation replicates to run at the first level (see
\code{\link{simulate_slopes}})}

\item{N_replicates_level2}{the number of simulation replicates to run at the second level  (see
\code{\link{simulate_slopes}})}

\item{birth_level_data}{a \code{tibble} or \code{data.frame} with birth level data (expanded or not)}

\item{scenario}{the scenario defining which models to be fitted: e.g. "ABCD", "AC"... (see paper
for explanations)}

\item{life_history_fits}{a named list containing the fits of each three life history models}

\item{nb_cores}{the number of CPU core(s) to use}

\item{lapply_pkg}{the R package used to implement a \code{lapply()} kind of function (default =
"pbmcapply"; other possibilities are "parallel" and "base")}

\item{seed}{a seed for the random number generator that will be added to the seeds for individual simulations; with such seeds corresponding to \code{1:N_replicates_level1}}

\item{timeout}{the maximal duration (in seconds) allowed for the fitting procedure (default =
Inf)}

\item{verbose}{whether to display the formula of the fit during the fitting procedure}

\item{.log}{a boolean indicating whether or not to write progress in a log file (for debugging purposes)}
}
\value{
a tibble containing all the results
}
\description{
This function creates the data required to apply a goodness of fit test (see
\code{\link{goodness_of_fit}}). It it the function of this package that is the most computationally
demanding. Depending on the number of cores CPU you use, the function call may lead to many days
of computation time or a large memory requirement.
}
\details{
The function performs the double bootstrapping procedure and proceeds as follow:
\enumerate{
\item if \code{life_history_fits} is not provided, the function starts by fitting the life history
models (see \code{\link{fit_life_histories}}) on the input data (i.e. \code{birth_level_data} which unless
studying the robustness of the function, should be the observed data).
\item the function then run a first series of simulation using the models fitted in step 1 (or the
set provided as an input using the argument \code{life_history_fits}) by calling \code{\link{simulate_slopes}}
\code{N_replicates_level1} times.
\item on each simulation outcome, a new set of life history models is fitted (using again
\code{\link{fit_life_histories}}). This is the step that is computationally intensive.
\item the function then run a second series of simulation using the models fitted during step 3 by
calling \code{\link{simulate_slopes}} \code{N_replicates_level2} times.
}

For details on the implementation used for the parallel computing and its settings, see
\code{\link{test_parallel_computation}}.
}
\examples{
#See ?twinR

}
\seealso{
\code{\link{simulate_slopes}}, \code{\link{goodness_of_fit}}, \code{\link{test_parallel_computation}}
}
